// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProjectData;

#nullable disable

namespace ProjectData.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.14");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "a81ad496-ec11-4ba4-8c1e-ab7bfe14bc46",
                            ConcurrencyStamp = "a81ad496-ec11-4ba4-8c1e-ab7bfe14bc46",
                            Name = "admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "1d020b29-d905-4466-bda2-6a261daa34bf",
                            ConcurrencyStamp = "1d020b29-d905-4466-bda2-6a261daa34bf",
                            Name = "user",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "2b090bad-a9b9-4cb2-b134-577031a6efb2",
                            ConcurrencyStamp = "2b090bad-a9b9-4cb2-b134-577031a6efb2",
                            Name = "guest",
                            NormalizedName = "GUEST"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "fec01f71-68a6-4858-9ed6-b2a4b10a6ba9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2d6d9628-913e-43b5-9e66-2ae96797d612",
                            Email = "admin@wsei.edu.pl",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@WSEI.EDU.PL",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEHyJy4/EZ91RaFbw7aA09HEUNWjz+4mgAwtZcSWsyjCd5Gixzd5I3ErUDaPKVM5oUA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9500a2d2-56d6-4b1e-8e2b-93d74c56e2b3",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = "46b1fa49-b265-4e5d-acad-91c965e3a0ae",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0cfddf7a-f83c-41d2-9000-686f74ef054e",
                            Email = "user@wsei.edu.pl",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER@WSEI.EDU.PL",
                            NormalizedUserName = "USER",
                            PasswordHash = "AQAAAAEAACcQAAAAECRSCo1zN65h4+OM94toh0Xwn9UkVp53GdIJmupxJUC2XTB4vVgT1JVKw62RQXh3WA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0858ac14-63a4-4ff7-ba06-4ad3861e6902",
                            TwoFactorEnabled = false,
                            UserName = "user"
                        },
                        new
                        {
                            Id = "3f52dbc7-dc23-4ef2-94ce-649ef86dc21f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3ea9f769-28d3-4eb8-bdd8-1e57b803631f",
                            Email = "guest@wsei.edu.pl",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "GUEST@WSEI.EDU.PL",
                            NormalizedUserName = "GUEST",
                            PasswordHash = "AQAAAAEAACcQAAAAEHV0KBjwVjfFECa5w/OEI3v1fZ2dOthe8Xz1kZbI7Jf2ZBWYhhyTrh7hTTxBLHOpyg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1e3e18a9-72d6-4fbb-afdb-789b326ad117",
                            TwoFactorEnabled = false,
                            UserName = "guest"
                        },
                        new
                        {
                            Id = "4d8f9321-672c-4191-9c0a-9bcd00630a42",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "547827d1-1f86-41ca-ac2e-e602e4c5ed20",
                            Email = "adamk01@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADAMK01@GMAIL.COM",
                            NormalizedUserName = "ADAMK01",
                            PasswordHash = "AQAAAAEAACcQAAAAEBAfWWqzsK6XztCfE7VmyDuZQz7hlFtSx/uMUJV+cZaSEeC3qsATrnSOsgECMEaB5Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ab6271b0-3269-4b8c-8bff-f3fbb49d6017",
                            TwoFactorEnabled = false,
                            UserName = "adamk01"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "fec01f71-68a6-4858-9ed6-b2a4b10a6ba9",
                            RoleId = "a81ad496-ec11-4ba4-8c1e-ab7bfe14bc46"
                        },
                        new
                        {
                            UserId = "46b1fa49-b265-4e5d-acad-91c965e3a0ae",
                            RoleId = "1d020b29-d905-4466-bda2-6a261daa34bf"
                        },
                        new
                        {
                            UserId = "3f52dbc7-dc23-4ef2-94ce-649ef86dc21f",
                            RoleId = "2b090bad-a9b9-4cb2-b134-577031a6efb2"
                        },
                        new
                        {
                            UserId = "4d8f9321-672c-4191-9c0a-9bcd00630a42",
                            RoleId = "1d020b29-d905-4466-bda2-6a261daa34bf"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ProjectData.Entities.AuthorEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("author_id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("TEXT");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("authors");

                    b.HasData(
                        new
                        {
                            Id = 101,
                            Email = "maxcut@gmail.com",
                            Name = "Max",
                            Surname = "Cuttler"
                        },
                        new
                        {
                            Id = 102,
                            Email = "danieltarka1994@o2.com",
                            Name = "Daniel",
                            Surname = "Tarka"
                        },
                        new
                        {
                            Id = 103,
                            Email = "john.doe@example.com",
                            Name = "John",
                            Surname = "Doe"
                        },
                        new
                        {
                            Id = 104,
                            Email = "alice.johnson@example.com",
                            Name = "Alice",
                            Surname = "Johnson"
                        },
                        new
                        {
                            Id = 105,
                            Email = "bob.smith@example.com",
                            Name = "Bob",
                            Surname = "Smith"
                        },
                        new
                        {
                            Id = 106,
                            Email = "eva.brown@example.com",
                            Name = "Eva",
                            Surname = "Brown"
                        },
                        new
                        {
                            Id = 107,
                            Email = "mike.anderson@example.com",
                            Name = "Mike",
                            Surname = "Anderson"
                        },
                        new
                        {
                            Id = 108,
                            Email = "sophia.miller@example.com",
                            Name = "Sophia",
                            Surname = "Miller"
                        },
                        new
                        {
                            Id = 109,
                            Email = "david.clark@example.com",
                            Name = "David",
                            Surname = "Clark"
                        },
                        new
                        {
                            Id = 110,
                            Email = "olivia.wilson@example.com",
                            Name = "Olivia",
                            Surname = "Wilson"
                        });
                });

            modelBuilder.Entity("ProjectData.Entities.CommentEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("comment_id");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("PhotoId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PhotoId");

                    b.ToTable("comments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Comment = "Amazing shot!",
                            PhotoId = 1,
                            UserId = "4d8f9321-672c-4191-9c0a-9bcd00630a42"
                        },
                        new
                        {
                            Id = 2,
                            Comment = "Spooky atmosphere!",
                            PhotoId = 2,
                            UserId = "46b1fa49-b265-4e5d-acad-91c965e3a0ae"
                        },
                        new
                        {
                            Id = 3,
                            Comment = "Beautiful beach day!",
                            PhotoId = 3,
                            UserId = "3f52dbc7-dc23-4ef2-94ce-649ef86dc21f"
                        },
                        new
                        {
                            Id = 4,
                            Comment = "Adventurous journey!",
                            PhotoId = 4,
                            UserId = "46b1fa49-b265-4e5d-acad-91c965e3a0ae"
                        },
                        new
                        {
                            Id = 5,
                            Comment = "Stunning sunset!",
                            PhotoId = 5,
                            UserId = "3f52dbc7-dc23-4ef2-94ce-649ef86dc21f"
                        },
                        new
                        {
                            Id = 6,
                            Comment = "City lights are magical!",
                            PhotoId = 6,
                            UserId = "fec01f71-68a6-4858-9ed6-b2a4b10a6ba9"
                        },
                        new
                        {
                            Id = 7,
                            Comment = "Cherry blossoms are my favorite!",
                            PhotoId = 7,
                            UserId = "fec01f71-68a6-4858-9ed6-b2a4b10a6ba9"
                        },
                        new
                        {
                            Id = 8,
                            Comment = "Impressive mountain view!",
                            PhotoId = 8,
                            UserId = "46b1fa49-b265-4e5d-acad-91c965e3a0ae"
                        },
                        new
                        {
                            Id = 9,
                            Comment = "Aerial views are mesmerizing!",
                            PhotoId = 9,
                            UserId = "4d8f9321-672c-4191-9c0a-9bcd00630a42"
                        },
                        new
                        {
                            Id = 10,
                            Comment = "Starry night, truly magical!",
                            PhotoId = 10,
                            UserId = "3f52dbc7-dc23-4ef2-94ce-649ef86dc21f"
                        });
                });

            modelBuilder.Entity("ProjectData.Entities.PhotoEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("photo_id");

                    b.Property<int?>("AuthorId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Camera")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateAndTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("TEXT");

                    b.Property<string>("Format")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Resolution")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("photos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AuthorId = 101,
                            Camera = "Nikon",
                            DateAndTime = new DateTime(2022, 12, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "My best photo from the Kryspinów lake",
                            Format = "_16x9",
                            Resolution = "_2560x1440"
                        },
                        new
                        {
                            Id = 2,
                            AuthorId = 102,
                            Camera = "Sony",
                            DateAndTime = new DateTime(2023, 10, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Halloween party photo",
                            Format = "_21x9",
                            Resolution = "_3840x2160"
                        },
                        new
                        {
                            Id = 3,
                            AuthorId = 103,
                            Camera = "Samsung",
                            DateAndTime = new DateTime(2022, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Sunny day at the beach",
                            Format = "_16x9",
                            Resolution = "_2560x1440"
                        },
                        new
                        {
                            Id = 4,
                            AuthorId = 104,
                            Camera = "iPhone",
                            DateAndTime = new DateTime(2023, 2, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Snowy mountains adventure",
                            Format = "_21x9",
                            Resolution = "_3840x2160"
                        },
                        new
                        {
                            Id = 5,
                            AuthorId = 105,
                            Camera = "Huawei",
                            DateAndTime = new DateTime(2022, 8, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Sunset over the city",
                            Format = "_16x9",
                            Resolution = "_2560x1440"
                        },
                        new
                        {
                            Id = 6,
                            AuthorId = 106,
                            Camera = "LG",
                            DateAndTime = new DateTime(2023, 11, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "City lights at night",
                            Format = "_21x9",
                            Resolution = "_3840x2160"
                        },
                        new
                        {
                            Id = 7,
                            AuthorId = 107,
                            Camera = "Google Pixel",
                            DateAndTime = new DateTime(2022, 4, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Cherry blossom in the park",
                            Format = "_16x9",
                            Resolution = "_2560x1440"
                        },
                        new
                        {
                            Id = 8,
                            AuthorId = 108,
                            Camera = "OnePlus",
                            DateAndTime = new DateTime(2023, 9, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Majestic mountain view",
                            Format = "_21x9",
                            Resolution = "_3840x2160"
                        },
                        new
                        {
                            Id = 9,
                            AuthorId = 109,
                            Camera = "Xiaomi",
                            DateAndTime = new DateTime(2022, 7, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Aerial view of the coastline",
                            Format = "_16x9",
                            Resolution = "_2560x1440"
                        },
                        new
                        {
                            Id = 10,
                            AuthorId = 110,
                            Camera = "Motorola",
                            DateAndTime = new DateTime(2023, 1, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Night sky full of stars",
                            Format = "_21x9",
                            Resolution = "_3840x2160"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjectData.Entities.CommentEntity", b =>
                {
                    b.HasOne("ProjectData.Entities.PhotoEntity", "Photo")
                        .WithMany("Comments")
                        .HasForeignKey("PhotoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Photo");
                });

            modelBuilder.Entity("ProjectData.Entities.PhotoEntity", b =>
                {
                    b.HasOne("ProjectData.Entities.AuthorEntity", "Author")
                        .WithMany("Photos")
                        .HasForeignKey("AuthorId");

                    b.Navigation("Author");
                });

            modelBuilder.Entity("ProjectData.Entities.AuthorEntity", b =>
                {
                    b.Navigation("Photos");
                });

            modelBuilder.Entity("ProjectData.Entities.PhotoEntity", b =>
                {
                    b.Navigation("Comments");
                });
#pragma warning restore 612, 618
        }
    }
}
