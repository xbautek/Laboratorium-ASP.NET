// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProjectData;

#nullable disable

namespace ProjectData.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240121174719_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.14");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "54184dae-8e3f-47f9-8bbc-c2b237ff2354",
                            ConcurrencyStamp = "54184dae-8e3f-47f9-8bbc-c2b237ff2354",
                            Name = "admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "d7d94954-7317-4687-99b3-c042ab336690",
                            ConcurrencyStamp = "d7d94954-7317-4687-99b3-c042ab336690",
                            Name = "user",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "f7d01f2d-7baa-4c13-aa1a-fcd2654ea446",
                            ConcurrencyStamp = "f7d01f2d-7baa-4c13-aa1a-fcd2654ea446",
                            Name = "guest",
                            NormalizedName = "GUEST"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "55063f64-92af-472e-99d5-32c543c41907",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c17f59ff-6c37-460d-ac06-192886d9c60d",
                            Email = "admin@wsei.edu.pl",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@WSEI.EDU.PL",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAENVCYmF1z0I8kCM48Tx7dq9WonxaUv9ZwMvZGvBuXuX0b18Fk2ZZGhOqlpy0W5/veA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "58d2176f-ddb9-4a9d-af61-0b2b210a87a8",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = "5c0363c7-1892-4341-ae7f-29aaeaae99e6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cc53340b-81f3-4ef7-a08c-5a385b3abe30",
                            Email = "user@wsei.edu.pl",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER@WSEI.EDU.PL",
                            NormalizedUserName = "USER",
                            PasswordHash = "AQAAAAEAACcQAAAAEB9BedLXLZkIA04VncWMJvvvLxrw9STec1bJIPd5OrMpbwr25IWtiYqY8BKkkdL5mg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "bbd77147-b27c-4b5a-a075-ce9f9812a9e5",
                            TwoFactorEnabled = false,
                            UserName = "user"
                        },
                        new
                        {
                            Id = "df68d24a-19eb-4190-9796-1b5fabd04e50",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e0ebcbd5-75c5-4261-9b61-9a6306b460f4",
                            Email = "test@wsei.edu.pl",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "TEST@WSEI.EDU.PL",
                            NormalizedUserName = "TEST",
                            PasswordHash = "AQAAAAEAACcQAAAAEHjLiZ5wWCsxaSLLz+e9IRjvdju3cjZX9NwSJVPLc45Ul+rgbKkZOfsIQWTGIvOQvQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "12dc1f12-8131-4cc8-9d86-9585b9f04ea5",
                            TwoFactorEnabled = false,
                            UserName = "test"
                        },
                        new
                        {
                            Id = "93cfb92f-1204-4786-90d8-6506ef00c814",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c21e1ead-b245-4315-a4f1-8e83cc1b0467",
                            Email = "adamk01@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADAMK01@GMAIL.COM",
                            NormalizedUserName = "ADAMK01",
                            PasswordHash = "AQAAAAEAACcQAAAAEOaenREuxYUHgtcuhohCsQUkxV7Lr5N7tXF1lcOO1hItCRcRXSGxNUhdyven4aiixg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "56c8a471-626c-4c49-af99-bebf202183ae",
                            TwoFactorEnabled = false,
                            UserName = "adamk01"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "55063f64-92af-472e-99d5-32c543c41907",
                            RoleId = "54184dae-8e3f-47f9-8bbc-c2b237ff2354"
                        },
                        new
                        {
                            UserId = "5c0363c7-1892-4341-ae7f-29aaeaae99e6",
                            RoleId = "d7d94954-7317-4687-99b3-c042ab336690"
                        },
                        new
                        {
                            UserId = "df68d24a-19eb-4190-9796-1b5fabd04e50",
                            RoleId = "f7d01f2d-7baa-4c13-aa1a-fcd2654ea446"
                        },
                        new
                        {
                            UserId = "93cfb92f-1204-4786-90d8-6506ef00c814",
                            RoleId = "d7d94954-7317-4687-99b3-c042ab336690"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ProjectData.Entities.AuthorEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("author_id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("TEXT");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("authors");

                    b.HasData(
                        new
                        {
                            Id = 101,
                            Email = "maxcut@gmail.com",
                            Name = "Max",
                            Surname = "Cuttler"
                        },
                        new
                        {
                            Id = 102,
                            Email = "danieltarka1994@o2.com",
                            Name = "Daniel",
                            Surname = "Tarka"
                        },
                        new
                        {
                            Id = 103,
                            Email = "john.doe@example.com",
                            Name = "John",
                            Surname = "Doe"
                        },
                        new
                        {
                            Id = 104,
                            Email = "alice.johnson@example.com",
                            Name = "Alice",
                            Surname = "Johnson"
                        },
                        new
                        {
                            Id = 105,
                            Email = "bob.smith@example.com",
                            Name = "Bob",
                            Surname = "Smith"
                        },
                        new
                        {
                            Id = 106,
                            Email = "eva.brown@example.com",
                            Name = "Eva",
                            Surname = "Brown"
                        },
                        new
                        {
                            Id = 107,
                            Email = "mike.anderson@example.com",
                            Name = "Mike",
                            Surname = "Anderson"
                        },
                        new
                        {
                            Id = 108,
                            Email = "sophia.miller@example.com",
                            Name = "Sophia",
                            Surname = "Miller"
                        },
                        new
                        {
                            Id = 109,
                            Email = "david.clark@example.com",
                            Name = "David",
                            Surname = "Clark"
                        },
                        new
                        {
                            Id = 110,
                            Email = "olivia.wilson@example.com",
                            Name = "Olivia",
                            Surname = "Wilson"
                        });
                });

            modelBuilder.Entity("ProjectData.Entities.CommentEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("comment_id");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("PhotoId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PhotoId");

                    b.ToTable("comments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Comment = "Amazing shot!",
                            PhotoId = 1,
                            UserId = "55063f64-92af-472e-99d5-32c543c41907"
                        },
                        new
                        {
                            Id = 2,
                            Comment = "Spooky atmosphere!",
                            PhotoId = 2,
                            UserId = "5c0363c7-1892-4341-ae7f-29aaeaae99e6"
                        },
                        new
                        {
                            Id = 3,
                            Comment = "Beautiful beach day!",
                            PhotoId = 3,
                            UserId = "df68d24a-19eb-4190-9796-1b5fabd04e50"
                        },
                        new
                        {
                            Id = 4,
                            Comment = "Adventurous journey!",
                            PhotoId = 4,
                            UserId = "5c0363c7-1892-4341-ae7f-29aaeaae99e6"
                        },
                        new
                        {
                            Id = 5,
                            Comment = "Stunning sunset!",
                            PhotoId = 5,
                            UserId = "df68d24a-19eb-4190-9796-1b5fabd04e50"
                        },
                        new
                        {
                            Id = 6,
                            Comment = "City lights are magical!",
                            PhotoId = 6,
                            UserId = "55063f64-92af-472e-99d5-32c543c41907"
                        },
                        new
                        {
                            Id = 7,
                            Comment = "Cherry blossoms are my favorite!",
                            PhotoId = 7,
                            UserId = "55063f64-92af-472e-99d5-32c543c41907"
                        },
                        new
                        {
                            Id = 8,
                            Comment = "Impressive mountain view!",
                            PhotoId = 8,
                            UserId = "5c0363c7-1892-4341-ae7f-29aaeaae99e6"
                        },
                        new
                        {
                            Id = 9,
                            Comment = "Aerial views are mesmerizing!",
                            PhotoId = 9,
                            UserId = "55063f64-92af-472e-99d5-32c543c41907"
                        },
                        new
                        {
                            Id = 10,
                            Comment = "Starry night, truly magical!",
                            PhotoId = 10,
                            UserId = "df68d24a-19eb-4190-9796-1b5fabd04e50"
                        });
                });

            modelBuilder.Entity("ProjectData.Entities.PhotoEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("photo_id");

                    b.Property<int?>("AuthorId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Camera")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateAndTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("TEXT");

                    b.Property<string>("Format")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Resolution")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("photos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AuthorId = 101,
                            Camera = "Nikon",
                            DateAndTime = new DateTime(2022, 12, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "My best photo from the Kryspinów lake",
                            Format = "_16x9",
                            Resolution = "_2560x1440"
                        },
                        new
                        {
                            Id = 2,
                            AuthorId = 102,
                            Camera = "Sony",
                            DateAndTime = new DateTime(2023, 10, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Halloween party photo",
                            Format = "_21x9",
                            Resolution = "_3840x2160"
                        },
                        new
                        {
                            Id = 3,
                            AuthorId = 103,
                            Camera = "Samsung",
                            DateAndTime = new DateTime(2022, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Sunny day at the beach",
                            Format = "_16x9",
                            Resolution = "_2560x1440"
                        },
                        new
                        {
                            Id = 4,
                            AuthorId = 104,
                            Camera = "iPhone",
                            DateAndTime = new DateTime(2023, 2, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Snowy mountains adventure",
                            Format = "_21x9",
                            Resolution = "_3840x2160"
                        },
                        new
                        {
                            Id = 5,
                            AuthorId = 105,
                            Camera = "Huawei",
                            DateAndTime = new DateTime(2022, 8, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Sunset over the city",
                            Format = "_16x9",
                            Resolution = "_2560x1440"
                        },
                        new
                        {
                            Id = 6,
                            AuthorId = 106,
                            Camera = "LG",
                            DateAndTime = new DateTime(2023, 11, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "City lights at night",
                            Format = "_21x9",
                            Resolution = "_3840x2160"
                        },
                        new
                        {
                            Id = 7,
                            AuthorId = 107,
                            Camera = "Google Pixel",
                            DateAndTime = new DateTime(2022, 4, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Cherry blossom in the park",
                            Format = "_16x9",
                            Resolution = "_2560x1440"
                        },
                        new
                        {
                            Id = 8,
                            AuthorId = 108,
                            Camera = "OnePlus",
                            DateAndTime = new DateTime(2023, 9, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Majestic mountain view",
                            Format = "_21x9",
                            Resolution = "_3840x2160"
                        },
                        new
                        {
                            Id = 9,
                            AuthorId = 109,
                            Camera = "Xiaomi",
                            DateAndTime = new DateTime(2022, 7, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Aerial view of the coastline",
                            Format = "_16x9",
                            Resolution = "_2560x1440"
                        },
                        new
                        {
                            Id = 10,
                            AuthorId = 110,
                            Camera = "Motorola",
                            DateAndTime = new DateTime(2023, 1, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Night sky full of stars",
                            Format = "_21x9",
                            Resolution = "_3840x2160"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjectData.Entities.CommentEntity", b =>
                {
                    b.HasOne("ProjectData.Entities.PhotoEntity", "Photo")
                        .WithMany("Comments")
                        .HasForeignKey("PhotoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Photo");
                });

            modelBuilder.Entity("ProjectData.Entities.PhotoEntity", b =>
                {
                    b.HasOne("ProjectData.Entities.AuthorEntity", "Author")
                        .WithMany("Photos")
                        .HasForeignKey("AuthorId");

                    b.Navigation("Author");
                });

            modelBuilder.Entity("ProjectData.Entities.AuthorEntity", b =>
                {
                    b.Navigation("Photos");
                });

            modelBuilder.Entity("ProjectData.Entities.PhotoEntity", b =>
                {
                    b.Navigation("Comments");
                });
#pragma warning restore 612, 618
        }
    }
}
